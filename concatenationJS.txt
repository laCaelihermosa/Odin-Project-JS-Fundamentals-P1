		What is concatenation and what happens when you add numbers and strings together?

CONCATENATION: 

	BINARY:
	We use + operator when one or both sides of the argument gather "" string value on it.
	
	- if the binary + is applied to both strings, it merges (concatenates) them:
	
		let s = "my" + "string";
		alert(s); // mystring
	- if any of the operands is a string, then the other one is converted to a string too.
		
		alert( '1' + 2 ); // "12"
		alert( 2 + '1' ); // "21"

	- It appears that there are a gerargical order in more complex examples:

		alert(2 + 2 + '1' ); // "41" and not "221"	
		alert('1' + 2 + 2); // "122" and not "14"

	- Proof for subtraction and division:

		alert( 6 - '2' ); // 4, converts '2' to a number
		alert( '6' / '2' ); // 3, converts both operands to numbers

	UNARY: 
	Numeric conversion, unary +
	The plus + exists in two forms: the binary form that we used above and the unary form.

	The unary plus or, in other words, the plus operator + applied to a single value, doesnâ€™t do anything to numbers. But if the operand is not a number, the unary plus converts it into a number.

	For example:

		// No effect on numbers
		let x = 1;
		alert( +x ); // 1

		let y = -2;
		alert( +y ); // -2

		// Converts non-numbers
		alert( +true ); // 1
		alert( +"" );   // 0

	It actually does the same thing as Number(...), but is shorter.

	The need to convert strings to numbers arises very often. For example, if we are getting values from HTML form fields, they are usually strings. What if we want to sum them?

	The binary plus would add them as strings:

		let apples = "2";
		let oranges = "3";

	alert( apples + oranges ); // "23", the binary plus concatenates strings
	If we want to treat them as numbers, we need to convert and then sum them:

		let apples = "2";
		let oranges = "3";

		// both values converted to numbers before the binary plus
		alert( +apples + +oranges ); // 5

		// the longer variant
		// alert( Number(apples) + Number(oranges) ); // 5

